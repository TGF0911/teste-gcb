[{"/home/tgf0911/www/pessoal/teste_gbc/web/src/services/api.ts":"1","/home/tgf0911/www/pessoal/teste_gbc/web/src/pages/Pagina.tsx":"2","/home/tgf0911/www/pessoal/teste_gbc/web/src/pages/FindDoctors.tsx":"3","/home/tgf0911/www/pessoal/teste_gbc/web/src/pages/UpdateDoctor.tsx":"4","/home/tgf0911/www/pessoal/teste_gbc/web/src/routes.tsx":"5","/home/tgf0911/www/pessoal/teste_gbc/web/src/pages/CreateDoctors.tsx":"6"},{"size":115,"mtime":1607310820907,"results":"7","hashOfConfig":"8"},{"size":612,"mtime":1607311874965,"results":"9","hashOfConfig":"8"},{"size":2324,"mtime":1607316136340,"results":"10","hashOfConfig":"8"},{"size":3181,"mtime":1607313081038,"results":"11","hashOfConfig":"8"},{"size":635,"mtime":1607312756883,"results":"12","hashOfConfig":"8"},{"size":4346,"mtime":1607315395931,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"txuehq",{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"19"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/tgf0911/www/pessoal/teste_gbc/web/src/services/api.ts",[],"/home/tgf0911/www/pessoal/teste_gbc/web/src/pages/Pagina.tsx",["29","30"],"import React, {useState, useEffect} from 'react';\nimport api from '../services/api'\n\ninterface Doctor {\n  id: number;\n  name: string;\n  crm: string;\n  cep: string;\n  landline: string;\n  phone: string;\n  specialties: [\n    {\n      id: number;\n      name: string;\n    }\n  ];\n}\n\nexport default function Pagina() {\n  const [doctors, setDoctors] = useState<Doctor[]>([])\n\n  useEffect(() => {\n    api.get('/doctors').then(({ data }) => setDoctors(data))   \n  }, [])\n  \n  return(\n    <div>\n      {doctors.map((d) =>{\n        {console.log(d)}\n        <h1 key={d.id}> Meu nome é {d.name}</h1>\n\n      })}\n    </div>\n  )\n}",["31","32"],"/home/tgf0911/www/pessoal/teste_gbc/web/src/pages/FindDoctors.tsx",["33","34","35","36","37","38","39","40","41","42","43","44"],"/home/tgf0911/www/pessoal/teste_gbc/web/src/pages/UpdateDoctor.tsx",["45"],"import React, { useState, useEffect } from 'react'\nimport { FormEvent } from 'react'\nimport { useHistory, useParams } from 'react-router-dom';\nimport Select from '../components/Select'\nimport api from '../services/api'\n\ninterface Doctor{\n  id: number;\n  name : string\n  crm: string\n  cep: string\n  landline: string\n  specialties: [\n    {\n      id: number;\n      name: string;\n    }\n  ];\n}\n\ninterface Specialty {\n  id: number;\n  name: string;\n}\n\ninterface RouteParams {\n  id: string;\n}\n\nexport default function UpdateDoctor() {\n  const history = useHistory()\n  const params = useParams<RouteParams>();\n \n  const [doctor, setDoctor] = useState<Doctor>()\n  const [specialty, setSpecialty] = useState<Specialty[]>([])\n\n\n  const [name, setName] = useState('')\n  const [crm, setCrm] = useState('')\n  const [cep, setCep] = useState('')\n  const [landline, setLandline] = useState('')\n  const [phone, setPhone] = useState('')\n  const [specialties, setSpecialties] = useState<string[]>([])\n\n  useEffect(() => {\n    api.get(`doctors/${params.id}`).then((response) => {\n      setDoctor(response.data);\n    });\n    api.get('/specialty').then(({ data }) => setSpecialty(data))\n  }, [params.id]);\n\n  async function UpdateDoctor(e : FormEvent){\n    e.preventDefault()\n    await api.put(`/doctor/${params.id}`, {\n      ...doctor,\n      name,\n      crm,\n      cep,\n      landline,\n      specialties\n    });\n    history.push('/doctors')\n  }\n\n  return (\n    <div id=\"update-container\">\n      <form onSubmit={UpdateDoctor} >\n        <fieldset>\n          <legend>Dados do Médico</legend>\n\n          <div className=\"input-block\">\n            <label htmlFor=\"name\">Nome Completo:</label>\n            <input type=\"text\" maxLength={120} id=\"name\" value={name} onChange={e => setName(e.target.value)} />\n          </div>\n\n          <div className=\"input-block\">\n            <label htmlFor=\"crm\">CRM:</label>\n            <input type=\"text\" id=\"crm\" value={crm} onChange={e => setCrm(e.target.value)} />\n          </div>\n\n          <div className=\"input-block\">\n            <label htmlFor=\"cep\">CEP:</label>\n            <input type=\"text\" maxLength={9} id=\"cep\" value={cep} onChange={e => setCep(e.target.value)} />\n          </div>\n\n          <div className=\"input-block\">\n            <label htmlFor=\"landline\">Telefone(Fixo):</label>\n            <input type=\"text\" id=\"landline\" value={landline} onChange={e => setLandline(e.target.value)} />\n          </div>\n\n          <div className=\"input-block\">\n            <label htmlFor=\"phone\">phone:</label>\n            <input type=\"text\" id=\"phone\" value={phone} onChange={e => setPhone(e.target.value)} />\n          </div>\n\n          {specialty.map((specialty) => {\n            return (\n              <div className=\"checkbox-block\" key={specialty.id}>\n                <label htmlFor={specialty.name}>{specialty.name}</label>\n                <input\n                  type='checkbox'\n                  id={specialty.name}\n                  value={specialty.id}\n                  onChange={e => setSpecialties([...specialties, e.target.value])}\n                />\n              </div>\n            )\n          })}\n        </fieldset>\n      </form>\n    </div>\n  )\n}\n","/home/tgf0911/www/pessoal/teste_gbc/web/src/routes.tsx",[],"/home/tgf0911/www/pessoal/teste_gbc/web/src/pages/CreateDoctors.tsx",[],{"ruleId":"46","severity":1,"message":"47","line":28,"column":24,"nodeType":"48","messageId":"49","endLine":28,"endColumn":26},{"ruleId":"50","severity":1,"message":"51","line":29,"column":9,"nodeType":"52","messageId":"53","endLine":29,"endColumn":25},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":6,"column":8,"nodeType":"60","messageId":"61","endLine":6,"endColumn":14},{"ruleId":"58","severity":1,"message":"62","line":29,"column":10,"nodeType":"60","messageId":"61","endLine":29,"endColumn":14},{"ruleId":"58","severity":1,"message":"63","line":29,"column":16,"nodeType":"60","messageId":"61","endLine":29,"endColumn":23},{"ruleId":"58","severity":1,"message":"64","line":31,"column":10,"nodeType":"60","messageId":"61","endLine":31,"endColumn":18},{"ruleId":"58","severity":1,"message":"65","line":31,"column":20,"nodeType":"60","messageId":"61","endLine":31,"endColumn":31},{"ruleId":"58","severity":1,"message":"66","line":32,"column":10,"nodeType":"60","messageId":"61","endLine":32,"endColumn":12},{"ruleId":"58","severity":1,"message":"67","line":32,"column":14,"nodeType":"60","messageId":"61","endLine":32,"endColumn":19},{"ruleId":"58","severity":1,"message":"68","line":33,"column":10,"nodeType":"60","messageId":"61","endLine":33,"endColumn":14},{"ruleId":"58","severity":1,"message":"69","line":33,"column":16,"nodeType":"60","messageId":"61","endLine":33,"endColumn":23},{"ruleId":"58","severity":1,"message":"70","line":34,"column":10,"nodeType":"60","messageId":"61","endLine":34,"endColumn":16},{"ruleId":"58","severity":1,"message":"71","line":34,"column":18,"nodeType":"60","messageId":"61","endLine":34,"endColumn":27},{"ruleId":"46","severity":1,"message":"47","line":60,"column":33,"nodeType":"48","messageId":"49","endLine":60,"endColumn":35},{"ruleId":"58","severity":1,"message":"59","line":4,"column":8,"nodeType":"60","messageId":"61","endLine":4,"endColumn":14},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-native-reassign",["72"],"no-negated-in-lhs",["73"],"@typescript-eslint/no-unused-vars","'Select' is defined but never used.","Identifier","unusedVar","'text' is assigned a value but never used.","'setText' is assigned a value but never used.","'selected' is assigned a value but never used.","'setSelected' is assigned a value but never used.","'uf' is assigned a value but never used.","'setUf' is assigned a value but never used.","'city' is assigned a value but never used.","'setCity' is assigned a value but never used.","'street' is assigned a value but never used.","'setStreet' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]